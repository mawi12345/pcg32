{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./docs-src/app.js","webpack:///./pcg32.js","webpack:///./node_modules/long/src/long.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PCG32","require","logEl","document","getElementById","seedEl","streamEl","applyButton","log","msg","textContent","seed","stream","location","hash","params","substring","split","map","a","parseInt","pcg32","round","concat","random","toString","cards","Array","from","length","_","index","chosen","card","number","suit","Math","floor","onclick","reload","Long","U","fromString","unsigned_32bit_int","long","low","unsigned_32bit_long","fromBits","pcg32_random_r","rng","oldstate","rstate","multiply","add","inc","xorshifted","shiftRightUnsigned","xor","rot","or","shiftLeft","negate","and","pcg32_srandom_r","initstate","initseq","seq","isLong","fromNumber","ZERO","_classCallCheck","this","bound","threshold","pcg32_boundedrand_r","wasm","WebAssembly","Instance","Module","Uint8Array","e","high","unsigned","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","str","radix","Error","RangeError","indexOf","radixToPower","result","size","min","power","mul","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","log2","ceil","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","numBits","shiftRight","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/pcg32/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const PCG32 = require('../pcg32')\n\n// get refs to the DOM\nconst logEl = document.getElementById('log')\nconst seedEl = document.getElementById('seed')\nconst streamEl = document.getElementById('stream')\nconst applyButton = document.getElementById('apply')\nconst log = (msg) => {\n  logEl.textContent += msg\n}\n\nlet seed = 42;\nlet stream = 54;\n\n// read the seed and stream from location hash\nif (location.hash) {\n  const params = location.hash.substring(1)\n    .split(',')\n    .map((a) => parseInt(a))\n  seed = params[0]\n  stream = params[1]\n}\n\nseedEl.value = seed\nstreamEl.value = stream\n\nconst rounds = 5\nconst pcg32 = new PCG32(seed, stream)\n\nfor (let round = 1; round <= rounds; round++) {\n    log(`Round ${round}\\n`)\n    // Make some 32-bit numbers\n    log('  32bit:')\n    for (let i = 0; i < 6; i++) {\n      log(` 0x${pcg32.random().toString(16)}`)\n    }\n    log('\\n')\n\n    // Toss some coins\n    log('  Coins: ')\n    for (let i = 0; i < 65; i++) {\n      log(`${pcg32.random(2) ? 'H' : 'T'}`)\n    }\n    log('\\n')\n\n    // Roll some dice\n    log('  Rolls:');\n    for (let i = 0; i < 33; i++) {\n      log(` ${pcg32.random(6) + 1}`)\n    }\n    log('\\n')\n\n    // Deal some cards\n    const SUITS = 4\n    const NUMBERS = 13\n    const CARDS = 52\n    const cards = Array.from({length: CARDS}).map((_, index) => index)\n\n    for (let i = CARDS; i > 1; i--) {\n      const chosen = pcg32.random(i)\n      const card = cards[chosen]\n      cards[chosen] = cards[i - 1]\n      cards[i - 1] = card;\n    }\n\n    log('  Cards:');\n\n    const number = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K']\n    const suit = ['h', 'c', 'd', 's']\n    for (let i = 0; i < CARDS; i++) {\n      log(` ${number[Math.floor(cards[i] / SUITS)]}${suit[cards[i] % SUITS]}`)\n      if ((i + 1) % 22 === 0) {\n        log('\\n\\t');\n      }\n    }\n    log('\\n\\n')\n}\n\napplyButton.onclick = function() {\n  location.hash = `#${parseInt(seedEl.value) || 0},${parseInt(streamEl.value) || 0}`\n  location.reload()\n}\n","/*\n * PCG Random Number Generation for JavaScript.\n *\n * Copyright 2017 Martin Wind\n * Based on the C implementation of Melissa O'Neill <oneill@pcg-random.org>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For additional information about the PCG random number generation scheme,\n * including its license and other licensing options, visit\n *\n *     http://www.pcg-random.org\n */\nconst Long = require('long')\nconst U = Long.fromString('6364136223846793005', true, 10)\n\n// get the lower 32 bits as positive Number\nconst unsigned_32bit_int = (long) => (long.low < 0) ? 0x100000000 + long.low : long.low\n\nconst unsigned_32bit_long = (long) => Long.fromBits(unsigned_32bit_int(long), 0, true)\n\nconst pcg32_random_r = (rng) => {\n  // uint64_t oldstate = rng->state;\n  const oldstate = rng.rstate\n\n  // rng->state = oldstate * 6364136223846793005ULL + rng->inc;\n  rng.rstate = oldstate.multiply(U).add(rng.inc)\n\n  // uint32_t xorshifted = ((oldstate >> 18u) ^ oldstate) >> 27u;\n  const xorshifted = unsigned_32bit_long(\n    oldstate.shiftRightUnsigned(18).xor(oldstate).shiftRightUnsigned(27)\n  )\n\n  // uint32_t rot = oldstate >> 59u;\n  const rot = unsigned_32bit_long(oldstate.shiftRightUnsigned(59))\n\n  // return (xorshifted >> rot) | (xorshifted << ((-rot) & 31));\n  return unsigned_32bit_int(\n    xorshifted.shiftRightUnsigned(rot).or(xorshifted.shiftLeft(rot.negate().and(31)))\n  )\n}\n\nconst pcg32_srandom_r = (initstate, initseq) => {\n  const seq = Long.isLong(initseq) ? initseq : Long.fromNumber(initseq, true)\n  const rstate = Long.isLong(initstate) ? initstate : Long.fromNumber(initstate, true)\n\n  const rng = {\n    rstate: Long.ZERO,\n    inc: seq.shiftLeft(1).or(1),\n  }\n\n  pcg32_random_r(rng)\n  rng.rstate = rng.rstate.add(rstate)\n  pcg32_random_r(rng);\n\n  return rng;\n}\n\nconst pcg32_boundedrand_r = (rng, bound) => {\n  // To avoid bias, we need to make the range of the RNG a multiple of\n  // bound, which we do by dropping output less than a threshold.\n  const threshold = 0x100000000 % bound;\n\n  // Uniformity guarantees that this loop will terminate.  In practice, it\n  // should usually terminate quickly; on average (assuming all bounds are\n  // equally likely), 82.25% of the time, we can expect it to require just\n  // one iteration.  In the worst case, someone passes a bound of 2^31 + 1\n  // (i.e., 2147483649), which invalidates almost 50% of the range.  In\n  // practice, bounds are typically small and only a tiny amount of the range\n  // is eliminated.\n  for (;;) {\n    const r = pcg32_random_r(rng);\n    if (r >= threshold) {\n      return r % bound\n    }\n  }\n}\n\nclass PCG32 {\n\n  constructor(initstate, initseq) {\n    const rng = pcg32_srandom_r(initstate, initseq)\n    this.rstate = rng.rstate\n    this.inc = rng.inc\n  }\n\n  random(bound) {\n    if (typeof bound === 'number') {\n      return pcg32_boundedrand_r(this, bound)\n    }\n    return pcg32_random_r(this)\n  }\n}\n\nmodule.exports = PCG32\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n"],"sourceRoot":""}